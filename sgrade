#!/usr/bin/env sh
#
# sgrade - Simple alternative to topgrade.
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
START_SECONDS="$(date '+%s')"

exec_status() {
    if "$@"; then
        status="$status$resource ${GREEN}OK!$WHITE\n"
    else
        retry "$resource"
    fi
}

retry() {
    printf "Retry updating %s? (s)hell/(y)es/(N)o/(q)uit? " "$resource"
    read -r answer
    if [ "$answer" != "${answer#[Ss]}" ]; then
        echo "${YELLOW}You will be sent back to where you stop after exiting this shell!$WHITE"
        ${SHELL:-/usr/bin/env sh} -i
        retry "$resource"
    elif [ "$answer" != "${answer#[Yy]}" ]; then
        "update_$1"
    elif [ "$answer" != "${answer#[Qq]}" ]; then
        exit 0
    else
        status="$status$resource ${RED}XX!$WHITE\n"
    fi
}

help() {
    printf "\
%s            update
%s -d         show stderr (debug mode)
%s -h --help  show help\
" "${0##*/}" "${0##*/}" "${0##*/}"
    exit 0
}

heading() {
    set +x
    echo
    time="$(date '+%X')"
    if [ -z "$seconds" ]; then
        seconds="$(date '+%s')"
    else
        newseconds="$(date '+%s')"
        elapsed="$((newseconds - seconds))"
        elapsed="$(date -ud @$elapsed +' last took: %X')"
        seconds="$newseconds"
    fi
    cols=$(tput cols)
    center=$((cols / 2))
    header=" $1 "
    headersize="${#header}"
    timesize="${#time}"
    elapsedsize="${#elapsed}"
    indent=$((center - (headersize / 2)))
    meio=0

    col="$CYAN${time}$WHITE "
    i=$((timesize + 1))
    while [ $i -lt "$((cols - elapsedsize))" ]; do
        if [ $i -lt $indent ]; then
            col="${col}─"
        elif [ $i -gt $((indent + headersize)) ]; then
            col="${col}─"
        elif [ $meio = 0 ]; then
            col="${col}${CYAN}$header$WHITE"
            meio=1
        fi

        i=$((i + 1))
    done

    col="${col}$YELLOW${elapsed}$WHITE"
    echo "$col"
    col=""
    echo
    $SG_DEBUG && set -x
}

# This is just a simple wrapper around 'command -v' to avoid
# spamming '>/dev/null' throughout this function. This also guards
# against aliases and functions.
has() {
    _cmd=$(command -v "$1") 2>/dev/null || return 1
    [ -x "$_cmd" ] || return 1
}

as_su() {
    eval su root -c \'"$*"\'
}

update_sgrade() {
    heading SGRADE
    if has git; then
        [ -z "$SG_PATH" ] && SG_PATH="${XDG_DATA_HOME:-$HOME/.local/share}/sgrade"
        if [ ! -d "$SG_PATH" ]; then
            git clone https://github.com/lucastavaresa/sgrade "$SG_PATH"
        fi

        (
            cd "$SG_PATH" && git pull --rebase
        )

        sg_repo_bin="$SG_PATH/sgrade"
        sg_bin="$(whereis sgrade | cut -d' ' -f 2)"
        if [ -z "$sg_bin" ] || [ ! -e "$sg_bin" ]; then
            if echo "$PATH" | grep "${XDG_BIN_HOME:-$HOME/.local/bin}"; then
                sg_bin="${XDG_BIN_HOME:-$HOME/.local/bin}/sgrade"
            else
                sg_bin="/usr/local/bin"
            fi
        fi

        sg_diff_file="${XDG_CACHE_HOME:-$HOME/.cache}/sg_diff.diff"
        diff -N "$sg_bin" "$sg_repo_bin" >"$sg_diff_file"

        if [ -n "$(cat "$sg_diff_file")" ]; then
            printf "There is a new sgrade file, want to see the difference [Y/n]? "
            read -r answer
            if [ "$answer" = "${answer#[Nn]}" ]; then
                ${VISUAL:-$EDITOR} "$sg_diff_file"
            fi

            printf "This will place the new sgrade in %s,\
do you want to update/install [y/N]? " "$sg_bin"
            read -r answer
            if [ "$answer" != "${answer#[Yy]}" ]; then
                if echo "$sg_bin" | grep "$HOME"; then
                    cp "$sg_repo_bin" "$sg_bin"
                else
                    "$SU" cp "$sg_repo_bin" "$sg_bin"
                fi
                echo
                echo "You have to re-execute after updates!"
                exit 0
            else
                status="${status}sgrade ${RED}XX! ${YELLOW}You refused to update sgrade!$WHITE\n"
            fi
        else
            status="${status}sgrade ${GREEN}OK!$WHITE\n"
        fi
    else
        status="${status}sgrade ${RED}XX! ${YELLOW}You need git to update sgrade automatically!$WHITE\n"
    fi
}

update_packages() {
    heading PACKAGES
    if has paru; then
        paru -Pw
        exec_status paru --noconfirm --color always -Syu
        update_etc
    elif has yay; then
        yay -Pw
        exec_status yay --noconfirm --color always -Syu
        update_etc
    elif has pacman; then
        exec_status "$SU" pacman --noconfirm --color always -Syu
        update_etc
    elif has xbps-install; then
        exec_status "$SU" xbps-install -Suy
    elif has apt; then
        exec_status "$SU" apt update -y && "$SU" apt dist-upgrade -y
    elif has dnf; then
        exec_status "$SU" dnf upgrade -y
    elif has yum; then
        exec_status "$SU" yum upgrade -y
    elif has swupd; then
        exec_status "$SU" swupd update -y
    elif has zypper; then
        exec_status "$SU" zypper refresh -y && "$SU" zypper dist-upgrade -y
    elif has pkg; then
        exec_status "$SU" pkg upgrade -y
        "$SU" pkg audit -Fr
        update_freebsd
    elif has pkg_add; then
        exec_status "$SU" pkg_add -uI
        update_openbsd
    elif has pkgin; then
        exec_status "$SU" pkgin upgrade -y
    fi
}

update_freebsd() {
    if has freebsd-update; then
        heading FREEBSD
        exec_status "$SU" freebsd-update fetch install
    fi
}

update_openbsd() {
    if has sysupgrade; then
        heading OPENBSD
        exec_status "$SU" sysupgrade -n
    fi
}

update_etc() {
    if has pacdiff; then
        heading ETC
        exec_status "$SU" pacdiff
    else
        status="${status}etc ${RED}XX! ${YELLOW}Install pacman-contrib! $GREEN\$ pacman -S pacman-contrib$WHITE\n"
    fi
}

update_nodejs() {
    if has node; then
        if has yarn; then
            heading YARN
            exec_status yarn global update
        elif has npm; then
            heading NPM
            if npm root --location=global | grep "$HOME"; then
                exec_status npm update --location=global
            fi
        else
            status="${status}nodejs ${RED}XX! ${YELLOW}Install yarn or npm!$WHITE\n"
        fi
    fi
}

update_pip() {
    if has pip; then
        heading PIP
        # shellcheck disable=SC2046
        exec_status pip install $(pip freeze | sed 's/==/>=/;/.*@.*$/d') --upgrade
    fi
}

update_go() {
    if has go; then
        if has gup; then
            heading GO
            exec_status gup update
        else
            status="${status}go ${RED}XX! ${YELLOW}Install gup! https://github.com/nao1215/gup$WHITE\n"
        fi
    fi
}

update_dotnet() {
    if has dotnet; then
        to_update="$(dotnet tool list --global | sed '1,2d;s/ .*//')"
        if [ -n "${to_update}" ]; then
            heading DOTNET
            set -f
            for tool in $to_update; do
                if ! dotnet tool update --global "$tool"; then
                    fails="$fails$tool "
                fi
            done
            if [ -z "$fails" ]; then
                status="$status$resource ${GREEN}OK!$WHITE\n"
            else
                status="$status$resource ${RED}XX! ${YELLOW}Failed to update: $fails$WHITE\n"
            fi
            set +f
        fi
    fi
}

update_fish() {
    if has fish; then
        heading FISH
        fish -c "fish_update_completions"
        if [ -e "${XDG_CONFIG_HOME:-$HOME/.config}/fish/functions/fisher.fish" ]; then
            exec_status fish -c "fisher update"
        elif [ -d "${XDG_CONFIG_HOME:-$HOME/.config}/fundle" ]; then
            exec_status fish -c "fundle self-update && fundle update"
        fi
    fi
}

update_rustup() {
    if has rustup; then
        heading RUSTUP
        if whereis rustup | cut -d' ' -f 2 | grep "$HOME"; then
            exec_status rustup self-update
        else
            exec_status rustup update
        fi
    fi
}

update_cargo() {
    if has cargo; then
        if has cargo-install-update; then
            heading CARGO
            exec_status cargo install-update -g -a
        else
            status="${status}cargo ${RED}XX! ${YELLOW}Install cargo-update! $GREEN\$ cargo install cargo-update$WHITE\n"
        fi
    fi
}

update_flatpak() {
    if has flatpak; then
        heading FLATPAK
        exec_status flatpak update
    fi
}

update_snap() {
    if has snap; then
        heading SNAP
        exec_status "$SU" snap refresh
    fi
}

update_brew() {
    if has brew; then
        heading BREW
        exec_status brew update && brew upgrade
    fi
}

update_nix() {
    if has nix; then
        heading NIX
        exec_status nix upgrade-nix && nix --upgrade
    fi
}

update_pearl() {
    if has pearl; then
        heading PEARL
        exec_status pearl update
    fi
}

update_gem() {
    if has gem; then
        heading GEM
        if [ -d "$HOME/.gem" ]; then
            exec_status gem upgrade --user-install
        else
            exec_status gem upgrade
        fi
    fi
}

update_gh() {
    if has gh; then
        heading GH
        exec_status gh extension upgrade --all
    fi
}

update_distrobox() {
    if has distrobox; then
        heading DISTROBOX
        exec_status distrobox upgrade --all
    fi
}

update_custom() {
    if [ -e "${XDG_CONFIG_HOME:-$HOME/.config}/sgrade/custom" ]; then
        heading CUSTOM
        exec_status "${XDG_CONFIG_HOME:-$HOME/.config}/sgrade/custom"
    fi
}

main() {
    SG_DEBUG=false
    case $* in
        -d) SG_DEBUG=true ;;
        -h) help ;;
        --help) help ;;
    esac

    if has doas; then
        SU=doas
    elif has sudo; then
        SU=sudo
    else
        SU=as_su
    fi

    status=""
    # Allow the user to specify the order and inclusion of information
    # functions through the 'SG_RESOURCES' environment variable.
    # shellcheck disable=2086
    {
        # Disable globbing and set the positional parameters to the
        # contents of 'SG_RESOURCES'.
        set -f
        set +f -- ${SG_RESOURCES-sgrade packages nodejs pip go dotnet fish rustup cargo flatpak snap brew nix pearl gem gh distrobox custom}

        # Iterate over the above list and run any existing "update_" functions.
        for resource; do
            "update_$resource"
        done
    }

    heading RESULTS
    elapsed_time="$(($(date +'%s') - START_SECONDS))"
    total_time="$CYAN$(date -ud @$elapsed_time +'Total time: %X')$WHITE"
    status="$(echo "$status" | column -l 2 -s ' ')"
    printf "%s\n%s\n" "$status" "$total_time"
}

main "$@"
